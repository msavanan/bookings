{{define "base"}}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    {{block "title" .}}
    {{end}}
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/css/datepicker-bs5.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="static/css/styles.css">

    {{block "css" .}} 
    {{end}}
</head>
     <nav class="navbar navbar-expand-lg bg-body-tertiary bg-dark border-bottom border-bottom-dark" data-bs-theme="dark">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">Navbar</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="\">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="\about">About</a>
              </li>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Rooms
                </a>
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
                  <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                </ul>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/search-availability">Book Now</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="\contact">Contact</a>
              </li>
            </ul>
          </div>
        </div>
      </nav>


    <body>
    {{block "content" .}}
    {{end}}


       <div class="row my-footer">
        <div class="col">
            Left
        </div>
        <div class="col">
            Middle
        </div>
        <div class="col">
            Right
        </div>
    </div>


<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js" integrity="sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS" crossorigin="anonymous"></script>

<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/js/datepicker-full.min.js"></script>

<script src="https://unpkg.com/notie"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

{{block "js" .}}

{{end}}

<script>  
  // Example starter JavaScript for disabling form submissions if there are invalid fields
 (() => {
   'use strict'
 
   // Fetch all the forms we want to apply custom Bootstrap validation styles to
   const forms = document.querySelectorAll('.needs-validation')
 
   // Loop over them and prevent submission
   Array.from(forms).forEach(form => {
     form.addEventListener('submit', event => {
       if (!form.checkValidity()) {
         event.preventDefault()
         event.stopPropagation()
       }
 
       form.classList.add('was-validated')
     }, false)
   })
 })()
 
 
 let attention = Prompt();

 function notify (msg, msgType){
   notie.alert({
       type: msgType, //Number|String, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
       text: msg, //String,
       // stay: Boolean, // optional, default = false
       // time: Number, // optional, default = 3, minimum = 1,
       // position: String // optional, default = 'top', enum: ['top', 'bottom']
   });
 }

 
 
 function notifyModal(title, txt, icon, confirmButtonText){
     Swal.fire({
     title: title,
     html: txt,
     icon: icon,
     confirmButtonText: confirmButtonText
   });
 }
 
         {{with .Error}}
            notify("{{.}}", "error");
        {{end}}

        {{with .Flash}}
        notify("{{.}}", "success");
        {{end}}

        {{with .Warning}}
        notify("{{.}}", "warning");
        {{end}}
        
 function Prompt(){
   let toast = function(c){
                           const{msg = "", icon="success", position = "top-end"} = c
                             const Toast = Swal.mixin({
                               toast: true,
                               position: position,
                               icon: icon,
                               title: msg,
                               showConfirmButton: false,
                               timer: 3000,
                               timerProgressBar: true,
                               didOpen: (toast) => {
                                 toast.addEventListener('mouseenter', Swal.stopTimer)
                                 toast.addEventListener('mouseleave', Swal.resumeTimer)
                             }
                            });
 
   Toast.fire({});
  }
 
   let success = function(c){
                             const{ title="", text="", footer=""} = c
                             Swal.fire({
                                         icon: "success",
                                         title: title,
                                         text: text,
                                         footer: footer
                                       });
                             }
     let error = function(c){
                             const{ title="", text="", footer=""} = c
                             Swal.fire({
                                         icon: "error",
                                         title: title,
                                         text: text,
                                         footer: footer
                                       });
                            }
     let custom = async function(c){
       const{msg="", title=""} = c;
       
       const { value: result} = await Swal.fire({
                                                       title: title,
                                                       html:msg,
                                                       backdrop: false,
                                                       showCancelButton: true,
                                                       focusConfirm: false,
                                                       willOpen: () =>{
                                                        if(c.willOpen !== undefined){
                                                        c.willOpen()
                                                        }
                                                       },
                                                       didOpen: () =>{
                                                         if (c.didOpen !== undefined){
                                                         c.didOpen()
                                                         }
                                                       },
                                                       preConfirm: () => {
                                                         return [
                                                           document.getElementById('start').value,
                                                           document.getElementById('end').value
                                                         ]
                                                       }
                                                     })
 
      if (result){
        if (result.dismiss !== Swal.DismissReason.cancel ){
          if (result.value !== ""){
            if (c.callback !== undefined){
              c.callback(result)
            }
          }else{
            c.callback(false)
          }
      }else{
        c.callback(false)
      }
    }
 }

 return {
     toast: toast,
     success: success,
     error: error,
     custom: custom
   }
}
 </script>




</body>
</html>

{{end}}